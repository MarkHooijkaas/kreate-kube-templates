---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ my.name }}
spec:
  schedule: {{ my.field.schedule }}
  successfulJobsHistoryLimit: {{ my.field.successfulJobsHistoryLimit }}
  concurrencyPolicy: {{ my.field.concurrencyPolicy}}
  jobTemplate:
    spec:
      backoffLimit: {{my.field.backoffLimit}} # 6 By Default
      template:
        metadata:
          name: {{app.appname}}
        {% for item in strukt.get("job",{}).keys()  %}
        {{ item }}: {{ strukt.job[item] | yaml(indent=12) }}
        {% endfor %}
        spec:
          restartPolicy: OnFailure
          # add all remaining pod.items, except for the labels
          {% for item in strukt.get("pod",{}).keys()  %}
          {{ item }}: {{ strukt.pod[item] | yaml(indent=12) }}
          {% endfor %}
          containers:
          - name: {{ my.field.container_name }}
            image: {% if 'image_repo' in my.field %}{{ my.field.image_repo }}/{% endif %}{{ my.field.image_name }}:{{ my.field.image_version }}
            imagePullPolicy: {{ my.field.imagePullPolicy }}
            {% for item in strukt.get("container",{}).keys()  %}
            {{ item }}: {{ strukt.container[item] | yaml(indent=18) }}
            {% endfor %}
            resources:
              limits:
                cpu: {{ my.field.cpu_limit }}
                memory: {{ my.field.memory_limit }}
              requests:
                cpu: {{ my.field.cpu_request }}
                memory: {{ my.field.memory_request }}
            env:
            {% for var in jinja_extension.sorted(strukt.get("env",{})) %}
            - name: {{ var }}
              value: {{ strukt.get("env."+var,{}) or konfig.var[var] }}
            {% endfor %}
            envFrom:
              - configMapRef:
              {% for cm in strukt.get("vars",[]) %}
                  name: {{ cm }}
              {% endfor %}
                {% if strukt.get("secret-vars", []) is defined and strukt.get("secret-vars", []) | length > 0 %}
              - secretRef:
              {% for secr in strukt.get("secret-vars",[]) %}
                  name: {{ secr }}
                {% endfor %}
              {% endif %}
            securityContext:
              runAsNonRoot: true
              runAsUser: {{ my.field.runAsUser }}
              runAsGroup: {{ my.field.runAsGroup }}
            command: ["/bin/sh"]
            args: ["-c", "{{ my.field.command }}"]
          serviceAccountName: {{ strukt.get("serviceAccountName", "")}}
