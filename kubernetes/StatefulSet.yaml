---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ my.name }}
spec:
  replicas: {{ my.field.replicas }}
  #revisionHistoryLimit: {{ my.field.revisionHistoryLimit }}
  selector:
    matchLabels:
      statefull-app: {{ my.name }}
  template:
    metadata:
      name: {{ my.name }}
      labels:
        statefull-app: {{ my.name }}
        # add extra labels from pod.labels
        {% for lbl in strukt._get_path("pod.labels",{}).keys()  %}
        {{ lbl }}: {{ strukt.pod.labels[lbl] }}
        {% endfor %}
      # add all remaining pod.items, except for the labels
      {% for item in strukt.get("pod",{}).keys()  %}
      {% if item != "labels" %}
      {{ item }}: {{ strukt.pod[item] | yaml(indent="        ") }}
      {% endif %}
      {% endfor %}
    spec:
      restartPolicy: {{ my.field.restartPolicy }}
      {{ my.optional("serviceAccount") }}
      {{ my.optional("serviceAccountName") }}
      {{ my.optional("serviceName") }}
      {{ my.optional("terminationGracePeriodSeconds") }}

      containers:
      - name: {{ my.field.container_name }}
        image: {{ my.field.image_repo }}/{{ my.field.image_name }}:{{ my.field.image_version }}
        {{ my.optional("imagePullPolicy") }}
        # add all container.items
        {% for item in strukt.get("container",{}).keys()  %}
        {{ item }}: {{ strukt.container[item] | yaml(indent="          ") }}
        {% endfor %}
        env:
        {% for var in jinja_extension.sorted(strukt.get("env",{})) %}
        - name: {{ var }}
          value: {{ strukt.get("env."+var,{}) or konfig.var[var] }}
        {% endfor %}
        envFrom:
{% if strukt.get("secret-vars",[]) %}
        - secretRef:
        {% for secr in strukt.get("secret-vars",[]) %}
            name: {{ secr }}
        {% endfor %}
{% endif %}
{% if strukt.get("vars",[]) %}
        - configMapRef:
        {% for cm in strukt.get("vars",[]) %}
            name: {{ cm }}
        {% endfor %}
{% endif %}
        ports:
        - containerPort: {{ my.field.containerPort }}
          protocol: {{ my.field.protocol }}
        resources:
          limits:
            cpu: {{ my.field.cpu_limit }}
            memory: {{ my.field.memory_limit }}
          requests:
            cpu: {{ my.field.cpu_request }}
            memory: {{ my.field.memory_request }}
